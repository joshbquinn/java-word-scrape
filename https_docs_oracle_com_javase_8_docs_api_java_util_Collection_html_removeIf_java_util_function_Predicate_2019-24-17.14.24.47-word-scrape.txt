https_docs_oracle_com_javase_8_docs_api_java_util_Collection_html_removeIf_java_util_function_Predicate_
public
interface
Collection
extends
Iterable
interface
collection
hierarchy
collection
represents
group
objects
known
elements
collections
allow
duplicate
elements
others
ordered
others
unordered
provide
direct
implementations
interface
provides
implementations
specific
subinterfaces
interface
typically
collections
around
manipulate
where
maximum
generality
desired
multisets
unordered
collections
contain
duplicate
elements
should
implement
interface
directly
general
Collection
implementation
classes
which
typically
implement
Collection
indirectly
through
subinterfaces
should
provide
standard
constructors
arguments
constructor
which
creates
empty
collection
constructor
single
argument
Collection
which
creates
collection
elements
argument
effect
latter
constructor
allows
collection
producing
equivalent
collection
desired
implementation
There
enforce
convention
interfaces
cannot
contain
constructors
general
Collection
implementations
platform
libraries
comply
destructive
methods
contained
interface
methods
modify
collection
which
operate
specified
throw
UnsupportedOperationException
collection
support
operation
these
methods
required
throw
UnsupportedOperationException
invocation
would
effect
collection
invoking
addAll
Collection
method
unmodifiable
collection
required
throw
exception
collection
added
empty
collection
implementations
restrictions
elements
contain
implementations
prohibit
elements
restrictions
types
their
elements
Attempting
ineligible
element
throws
unchecked
exception
typically
NullPointerException
ClassCastException
Attempting
query
presence
ineligible
element
throw
exception
simply
return
false
implementations
exhibit
former
behavior
exhibit
latter
generally
attempting
operation
ineligible
element
whose
completion
would
result
insertion
ineligible
element
collection
throw
exception
succeed
option
implementation
exceptions
marked
optional
specification
interface
collection
determine
synchronization
policy
absence
stronger
guarantee
implementation
undefined
behavior
result
invocation
method
collection
being
mutated
another
thread
includes
direct
invocations
passing
collection
method
might
perform
invocations
using
existing
iterator
examine
collection
methods
Collections
Framework
interfaces
defined
terms
equals
method
specification
contains
Object
method
returns
collection
contains
least
element
equals
specification
should
construed
imply
invoking
Collection
contains
argument
cause
equals
invoked
element
Implementations
implement
optimizations
whereby
equals
invocation
avoided
comparing
codes
elements
Object
hashCode
specification
guarantees
objects
unequal
codes
cannot
equal
generally
implementations
various
Collections
Framework
interfaces
advantage
specified
behavior
underlying
Object
methods
wherever
implementor
deems
appropriate
collection
operations
which
perform
recursive
traversal
collection
exception
referential
instances
where
collection
directly
indirectly
contains
itself
includes
clone
equals
hashCode
toString
methods
Implementations
optionally
handle
referential
scenario
current
implementations
interface
member
Collections
Framework
Implementation
Requirements
default
method
implementations
inherited
otherwise
apply
synchronization
protocol
Collection
implementation
specific
synchronization
protocol
override
default
implementations
apply
protocol
Since
SortedSet
SortedMap
HashSet
TreeSet
ArrayList
LinkedList
Vector
Collections
Arrays
AbstractCollection
Method
Summary
Methods
Instance
Methods
Abstract
Methods
Default
Methods
Modifier
Method
Description
boolean
Ensures
collection
contains
specified
element
optional
operation
boolean
addAll
Collection
extends
elements
specified
collection
collection
optional
operation
clear
Removes
elements
collection
optional
operation
boolean
contains
Object
Returns
collection
contains
specified
element
boolean
containsAll
Collection
Returns
collection
contains
elements
specified
collection
boolean
equals
Object
Compares
specified
collection
equality
hashCode
Returns
value
collection
boolean
isEmpty
Returns
collection
contains
elements
Iterator
iterator
Returns
iterator
elements
collection
default
Stream
parallelStream
Returns
possibly
parallel
Stream
collection
source
boolean
remove
Object
Removes
single
specified
element
collection
present
optional
operation
boolean
removeAll
Collection
Removes
collection
elements
contained
specified
collection
optional
operation
default
boolean
removeIf
Predicate
super
filter
Removes
elements
collection
satisfy
given
predicate
boolean
retainAll
Collection
Retains
elements
collection
contained
specified
collection
optional
operation
Returns
number
elements
collection
default
Spliterator
spliterator
Creates
Spliterator
elements
collection
default
Stream
stream
Returns
sequential
Stream
collection
source
Object
toArray
Returns
array
containing
elements
collection
toArray
Returns
array
containing
elements
collection
runtime
returned
array
specified
array
Methods
inherited
interface
Iterable
forEach
Method
Detail
Returns
number
elements
collection
collection
contains
Integer
VALUE
elements
returns
Integer
VALUE
Returns
number
elements
collection
isEmpty
boolean
isEmpty
Returns
collection
contains
elements
Returns
collection
contains
elements
contains
boolean
contains
Object
Returns
collection
contains
specified
element
formally
returns
collection
contains
least
element
equals
Parameters
element
whose
presence
collection
tested
Returns
collection
contains
specified
element
Throws
ClassCastException
specified
element
incompatible
collection
optional
NullPointerException
specified
element
collection
permit
elements
optional
iterator
Iterator
iterator
Returns
iterator
elements
collection
There
guarantees
concerning
order
which
elements
returned
unless
collection
class
provides
guarantee
Specified
iterator
interface
Iterable
Returns
Iterator
elements
collection
toArray
Object
toArray
Returns
array
containing
elements
collection
collection
makes
guarantees
order
elements
returned
iterator
method
return
elements
order
returned
array
references
maintained
collection
method
allocate
array
collection
backed
array
caller
modify
returned
array
method
bridge
between
array
based
collection
based
Returns
array
containing
elements
collection
toArray
toArray
Returns
array
containing
elements
collection
runtime
returned
array
specified
array
collection
specified
array
returned
therein
Otherwise
array
allocated
runtime
specified
array
collection
collection
specified
array
spare
array
elements
collection
element
array
following
collection
useful
determining
collection
caller
knows
collection
contain
elements
collection
makes
guarantees
order
elements
returned
iterator
method
return
elements
order
toArray
method
method
bridge
between
array
based
collection
based
Further
method
allows
precise
control
runtime
output
array
under
certain
circumstances
allocation
costs
Suppose
collection
known
contain
strings
following
collection
newly
allocated
array
String
String
toArray
String
toArray
Object
identical
function
toArray
Parameters
runtime
array
contain
collection
Parameters
array
which
elements
collection
stored
enough
otherwise
array
runtime
allocated
Returns
array
containing
elements
collection
Throws
ArrayStoreException
runtime
specified
array
supertype
runtime
every
element
collection
NullPointerException
specified
array
boolean
Ensures
collection
contains
specified
element
optional
operation
Returns
collection
changed
result
Returns
false
collection
permit
duplicates
already
contains
specified
element
Collections
support
operation
place
limitations
elements
added
collection
particular
collections
refuse
elements
others
impose
restrictions
elements
added
Collection
classes
should
clearly
specify
their
documentation
restrictions
elements
added
collection
refuses
particular
element
reason
already
contains
element
throw
exception
rather
returning
false
preserves
invariant
collection
always
contains
specified
element
returns
Parameters
element
whose
presence
collection
ensured
Returns
collection
changed
result
Throws
UnsupportedOperationException
operation
supported
collection
ClassCastException
class
specified
element
prevents
being
added
collection
NullPointerException
specified
element
collection
permit
elements
IllegalArgumentException
property
element
prevents
being
added
collection
IllegalStateException
element
cannot
added
insertion
restrictions
remove
boolean
remove
Object
Removes
single
specified
element
collection
present
optional
operation
formally
removes
element
equals
collection
contains
elements
Returns
collection
contained
specified
element
equivalently
collection
changed
result
Parameters
element
removed
collection
present
Returns
element
removed
result
Throws
ClassCastException
specified
element
incompatible
collection
optional
NullPointerException
specified
element
collection
permit
elements
optional
UnsupportedOperationException
remove
operation
supported
collection
containsAll
boolean
containsAll
Collection
Returns
collection
contains
elements
specified
collection
Parameters
collection
checked
containment
collection
Returns
collection
contains
elements
specified
collection
Throws
ClassCastException
types
elements
specified
collection
incompatible
collection
optional
NullPointerException
specified
collection
contains
elements
collection
permit
elements
optional
specified
collection
contains
Object
addAll
boolean
addAll
Collection
extends
elements
specified
collection
collection
optional
operation
behavior
operation
undefined
specified
collection
modified
while
operation
progress
implies
behavior
undefined
specified
collection
collection
collection
nonempty
Parameters
collection
containing
elements
added
collection
Returns
collection
changed
result
Throws
UnsupportedOperationException
addAll
operation
supported
collection
ClassCastException
class
element
specified
collection
prevents
being
added
collection
NullPointerException
specified
collection
contains
element
collection
permit
elements
specified
collection
IllegalArgumentException
property
element
specified
collection
prevents
being
added
collection
IllegalStateException
elements
added
insertion
restrictions
Object
removeAll
boolean
removeAll
Collection
Removes
collection
elements
contained
specified
collection
optional
operation
After
returns
collection
contain
elements
common
specified
collection
Parameters
collection
containing
elements
removed
collection
Returns
collection
changed
result
Throws
UnsupportedOperationException
removeAll
method
supported
collection
ClassCastException
types
elements
collection
incompatible
specified
collection
optional
NullPointerException
collection
contains
elements
specified
collection
support
elements
optional
specified
collection
remove
Object
contains
Object
removeIf
default
boolean
removeIf
Predicate
super
filter
Removes
elements
collection
satisfy
given
predicate
Errors
runtime
exceptions
thrown
during
iteration
predicate
relayed
caller
Implementation
Requirements
default
implementation
traverses
elements
collection
using
iterator
matching
element
removed
using
Iterator
remove
collection
iterator
support
removal
UnsupportedOperationException
thrown
matching
element
Parameters
filter
predicate
which
returns
elements
removed
Returns
elements
removed
Throws
NullPointerException
specified
filter
UnsupportedOperationException
elements
cannot
removed
collection
Implementations
throw
exception
matching
element
cannot
removed
general
removal
supported
Since
retainAll
boolean
retainAll
Collection
Retains
elements
collection
contained
specified
collection
optional
operation
removes
collection
elements
contained
specified
collection
Parameters
collection
containing
elements
retained
collection
Returns
collection
changed
result
Throws
UnsupportedOperationException
retainAll
operation
supported
collection
ClassCastException
types
elements
collection
incompatible
specified
collection
optional
NullPointerException
collection
contains
elements
specified
collection
permit
elements
optional
specified
collection
remove
Object
contains
Object
clear
clear
Removes
elements
collection
optional
operation
collection
empty
method
returns
Throws
UnsupportedOperationException
clear
operation
supported
collection
equals
boolean
equals
Object
Compares
specified
collection
equality
While
Collection
interface
stipulations
general
contract
Object
equals
programmers
implement
Collection
interface
directly
create
class
Collection
exercise
choose
override
Object
equals
necessary
simplest
course
action
Object
implementation
implementor
implement
value
comparison
place
default
reference
comparison
interfaces
mandate
value
comparisons
general
contract
Object
equals
method
states
equals
symmetric
equals
equals
contracts
equals
equals
state
lists
equal
lists
custom
equals
method
collection
class
implements
neither
interface
return
false
collection
compared
logic
possible
write
class
correctly
implements
interfaces
Overrides
equals
class
Object
Parameters
compared
equality
collection
Returns
specified
equal
collection
Object
equals
Object
equals
Object
equals
Object
hashCode
hashCode
Returns
value
collection
While
Collection
interface
stipulations
general
contract
Object
hashCode
method
programmers
should
class
overrides
Object
equals
method
override
Object
hashCode
method
order
satisfy
general
contract
Object
hashCode
method
particular
equals
implies
hashCode
hashCode
Overrides
hashCode
class
Object
Returns
value
collection
Object
hashCode
Object
equals
Object
spliterator
default
Spliterator
spliterator
Creates
Spliterator
elements
collection
Implementations
should
document
characteristic
values
reported
spliterator
characteristic
values
required
reported
spliterator
reports
Spliterator
SIZED
collection
contains
elements
default
implementation
should
overridden
subclasses
return
efficient
spliterator
order
preserve
expected
laziness
behavior
stream
parallelStream
methods
spliterators
should
either
characteristic
IMMUTABLE
CONCURRENT
binding
these
practical
overriding
class
should
describe
spliterator
documented
policy
binding
structural
interference
should
override
stream
parallelStream
methods
create
streams
using
Supplier
spliterator
Stream
StreamSupport
stream
spliterator
spliteratorCharacteristics
These
requirements
ensure
streams
produced
stream
parallelStream
methods
reflect
contents
collection
initiation
terminal
stream
operation
Specified
spliterator
interface
Iterable
Implementation
Requirements
default
implementation
creates
binding
spliterator
collections
Iterator
spliterator
inherits
properties
collection
iterator
created
Spliterator
reports
Spliterator
SIZED
Implementation
created
Spliterator
additionally
reports
Spliterator
SUBSIZED
spliterator
covers
elements
reporting
additional
characteristic
values
SIZED
SUBSIZED
clients
control
specialize
simplify
computation
However
enable
shared
immutable
empty
spliterator
Spliterators
emptySpliterator
empty
collections
enables
clients
determine
spliterator
covers
elements
Returns
Spliterator
elements
collection
Since
stream
default
Stream
stream
Returns
sequential
Stream
collection
source
method
should
overridden
spliterator
method
cannot
return
spliterator
IMMUTABLE
CONCURRENT
binding
spliterator
details
Implementation
Requirements
default
implementation
creates
sequential
Stream
collection
Spliterator
Returns
sequential
Stream
elements
collection
Since
parallelStream
default
Stream
parallelStream
Returns
possibly
parallel
Stream
collection
source
allowable
method
return
sequential
stream
method
should
overridden
spliterator
method
cannot
return
spliterator
IMMUTABLE
CONCURRENT
binding
spliterator
details
Implementation
Requirements
default
implementation
creates
parallel
Stream
collection
Spliterator
Returns
possibly
parallel
Stream
elements
collection
Since
navigation
links
Overview
Package
Class
Deprecated
Index
trade
PlatformStandard
Class
Class
Frames
Frames
Classes
Summary
Nested
Field
Constr
Method
Detail
Field
Constr
Method
Submit
feature
reference
developer
documentation
Documentation
documentation
contains
detailed
developer
targeted
descriptions
conceptual
overviews
definitions
terms
workarounds
working
examples
Copyright
x00a9
Oracle
affiliates
rights
reserved
subject
license
terms
documentation
redistribution
policy
Scripting
tracks
traffic
change
content
